import sqlite3
import tkinter as tk
from tkinter import messagebox, ttk

# Função para conectar ao banco de dados
def connect_db():
    conn = sqlite3.connect('biblioteca.db')
    cursor = conn.cursor()
    return conn, cursor

# Função para adicionar autor
def add_autor():
    nome = entry_nome_autor.get()
    nacionalidade = entry_nacionalidade_autor.get()
    
    if not nome or not nacionalidade:
        messagebox.showwarning('Campo Vazio', 'Por favor, preencha todos os campos!')
        return
    
    conn, cursor = connect_db()
    cursor.execute('INSERT INTO Autores (Nome, Nacionalidade) VALUES (?, ?)', (nome, nacionalidade))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Autor adicionado com sucesso!')
    entry_nome_autor.delete(0, tk.END)
    entry_nacionalidade_autor.delete(0, tk.END)
    update_autores_combo()

# Função para adicionar livro
def add_livro():
    titulo = entry_titulo_livro.get()
    autor = combo_autor.get()
    ano = entry_ano_livro.get()
    genero = entry_genero_livro.get()
    
    if not titulo or not autor or not ano or not genero:
        messagebox.showwarning('Campo Vazio', 'Por favor, preencha todos os campos!')
        return
    
    conn, cursor = connect_db()
    cursor.execute('INSERT INTO Livros (Titulo, AutorID, AnoPublicacao, Genero) VALUES (?, (SELECT AutorID FROM Autores WHERE Nome=?), ?, ?)', 
                   (titulo, autor, ano, genero))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Livro adicionado com sucesso!')
    entry_titulo_livro.delete(0, tk.END)
    entry_ano_livro.delete(0, tk.END)
    entry_genero_livro.delete(0, tk.END)
    update_livros_combo()

# Função para adicionar empréstimo
def add_emprestimo():
    livro = combo_livro.get()
    data_emp = entry_data_emp.get()
    data_dev = entry_data_dev.get()
    usuario = entry_nome_usuario.get()
    
    if not livro or not data_emp or not data_dev or not usuario:
        messagebox.showwarning('Campo Vazio', 'Por favor, preencha todos os campos!')
        return
    
    conn, cursor = connect_db()
    cursor.execute('INSERT INTO Emprestimos (LivroID, DataEmprestimo, DataDevolucao, NomeUsuario) VALUES ((SELECT LivroID FROM Livros WHERE Titulo=?), ?, ?, ?)', 
                   (livro, data_emp, data_dev, usuario))
    conn.commit()
    conn.close()
    messagebox.showinfo('Sucesso', 'Empréstimo adicionado com sucesso!')
    entry_data_emp.delete(0, tk.END)
    entry_data_dev.delete(0, tk.END)
    entry_nome_usuario.delete(0, tk.END)

# Função para visualizar todos os livros
def view_livros():
    conn, cursor = connect_db()
    cursor.execute('SELECT Titulo FROM Livros')
    livros = cursor.fetchall()
    conn.close()
    livros_list.delete(0, tk.END)
    for livro in livros:
        livros_list.insert(tk.END, livro[0])

# Função para visualizar todos os empréstimos
def view_emprestimos():
    conn, cursor = connect_db()
    cursor.execute('SELECT LivroID, DataEmprestimo, DataDevolucao, NomeUsuario FROM Emprestimos')
    emprestimos = cursor.fetchall()
    conn.close()
    emprestimos_list.delete(0, tk.END)
    for emp in emprestimos:
        emprestimos_list.insert(tk.END, f'LivroID: {emp[0]}, Data Emp: {emp[1]}, Data Dev: {emp[2]}, Usuário: {emp[3]}')

# Função para atualizar o combobox de autores
def update_autores_combo():
    conn, cursor = connect_db()
    cursor.execute('SELECT Nome FROM Autores')
    autores = cursor.fetchall()
    combo_autor['values'] = [autor[0] for autor in autores]
    conn.close()

# Função para atualizar o combobox de livros
def update_livros_combo():
    conn, cursor = connect_db()
    cursor.execute('SELECT Titulo FROM Livros')
    livros = cursor.fetchall()
    combo_livro['values'] = [livro[0] for livro in livros]
    conn.close()

# Função para buscar livros pelo nome
def search_livros():
    search_term = entry_search.get()
    conn, cursor = connect_db()
    cursor.execute('SELECT Titulo FROM Livros WHERE Titulo LIKE ?', ('%' + search_term + '%',))
    livros = cursor.fetchall()
    conn.close()
    livros_list.delete(0, tk.END)
    for livro in livros:
        livros_list.insert(tk.END, livro[0])

# Interface gráfica com Tkinter
root = tk.Tk()
root.title('Sistema de Biblioteca')
root.configure(bg='#e0f2e9')  # Cor de fundo verde clara

# Frame para adicionar autores
frame_autor = tk.LabelFrame(root, text='Adicionar Autor', bg='#c8e6c9', fg='black')
frame_autor.grid(row=0, column=0, padx=10, pady=10)

tk.Label(frame_autor, text='Nome:', bg='#c8e6c9').grid(row=0, column=0)
entry_nome_autor = tk.Entry(frame_autor)
entry_nome_autor.grid(row=0, column=1)

tk.Label(frame_autor, text='Nacionalidade:', bg='#c8e6c9').grid(row=1, column=0)
entry_nacionalidade_autor = tk.Entry(frame_autor)
entry_nacionalidade_autor.grid(row=1, column=1)

tk.Button(frame_autor, text='Adicionar Autor', command=add_autor, bg='#4caf50', fg='white').grid(row=2, columnspan=2, pady=5)

# Frame para adicionar livros
frame_livro = tk.LabelFrame(root, text='Adicionar Livro', bg='#c8e6c9', fg='black')
frame_livro.grid(row=1, column=0, padx=10, pady=10)

tk.Label(frame_livro, text='Título:', bg='#c8e6c9').grid(row=0, column=0)
entry_titulo_livro = tk.Entry(frame_livro)
entry_titulo_livro.grid(row=0, column=1)

tk.Label(frame_livro, text='Autor:', bg='#c8e6c9').grid(row=1, column=0)
combo_autor = ttk.Combobox(frame_livro)
combo_autor.grid(row=1, column=1)
update_autores_combo()

tk.Label(frame_livro, text='Ano Publicação:', bg='#c8e6c9').grid(row=2, column=0)
entry_ano_livro = tk.Entry(frame_livro)
entry_ano_livro.grid(row=2, column=1)

tk.Label(frame_livro, text='Gênero:', bg='#c8e6c9').grid(row=3, column=0)
entry_genero_livro = tk.Entry(frame_livro)
entry_genero_livro.grid(row=3, column=1)

tk.Button(frame_livro, text='Adicionar Livro', command=add_livro, bg='#4caf50', fg='white').grid(row=4, columnspan=2, pady=5)

# Frame para adicionar empréstimos
frame_emprestimo = tk.LabelFrame(root, text='Adicionar Empréstimo', bg='#c8e6c9', fg='black')
frame_emprestimo.grid(row=2, column=0, padx=10, pady=10)

tk.Label(frame_emprestimo, text='Livro:', bg='#c8e6c9').grid(row=0, column=0)
combo_livro = ttk.Combobox(frame_emprestimo)
combo_livro.grid(row=0, column=1)
update_livros_combo()

tk.Label(frame_emprestimo, text='Data Empréstimo:', bg='#c8e6c9').grid(row=1, column=0)
entry_data_emp = tk.Entry(frame_emprestimo)
entry_data_emp.grid(row=1, column=1)

tk.Label(frame_emprestimo, text='Data Devolução:', bg='#c8e6c9').grid(row=2, column=0)
entry_data_dev = tk.Entry(frame_emprestimo)
entry_data_dev.grid(row=2, column=1)

tk.Label(frame_emprestimo, text='Nome Usuário:', bg='#c8e6c9').grid(row=3, column=0)
entry_nome_usuario = tk.Entry(frame_emprestimo)
entry_nome_usuario.grid(row=3, column=1)

tk.Button(frame_emprestimo, text='Adicionar Empréstimo', command=add_emprestimo, bg='#4caf50', fg='white').grid(row=4, columnspan=2, pady=5)

# Frame para buscar livros
frame_busca = tk.LabelFrame(root, text='Buscar Livros', bg='#c8e6c9', fg='black')
frame_busca.grid(row=3, column=0, padx=10, pady=10)

tk.Label(frame_busca, text='Buscar por Título:', bg='#c8e6c9').grid(row=0, column=0)
entry_search = tk.Entry(frame_busca)
entry_search.grid(row=0, column=1)

tk.Button(frame_busca, text='Buscar', command=search_livros, bg='#4caf50', fg='white').grid(row=1, columnspan=2, pady=5)

# Listbox para exibir livros
livros_list = tk.Listbox(root, bg='#ffffff')
livros_list.grid(row=4, column=0, padx=10, pady=10)

# Listbox para exibir empréstimos
emprestimos_list = tk.Listbox(root, bg='#ffffff')
emprestimos_list.grid(row=5, column=0, padx=10, pady=10)

tk.Button(root, text='Visualizar Livros', command=view_livros, bg='#4caf50', fg='white').grid(row=6, column=0, padx=10, pady=5)
tk.Button(root, text='Visualizar Empréstimos', command=view_emprestimos, bg='#4caf50', fg='white').grid(row=7, column=0, padx=10, pady=5)

root.mainloop()
# Listbox para exibir livros
livros_list = tk.Listbox(root, bg='#ffffff', width=50, height=10)  # Ajuste a largura e a altura conforme necessário
livros_list.grid(row=4, column=0, padx=10, pady=10)

# Listbox para exibir empréstimos
emprestimos_list = tk.Listbox(root, bg='#ffffff', width=50, height=10)  # Ajuste a largura e a altura conforme necessário
emprestimos_list.grid(row=5, column=0, padx=10, pady=10)
